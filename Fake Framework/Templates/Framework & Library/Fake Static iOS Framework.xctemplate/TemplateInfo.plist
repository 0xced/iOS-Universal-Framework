<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Kind</key>
	<string>Xcode.Xcode3.ProjectTemplateUnitKind</string>
	<key>Identifier</key>
	<string>org.stenerud.fakeIosStaticFramework</string>
	<key>Concrete</key>
	<true/>
	<key>Description</key>
	<string>This template builds a "fake" static iOS framework. Building "Universal Framework" will produce "&lt;configuration&gt;-universal/&lt;your framework&gt;" in your build folder.</string>
	<key>SortOrder</key>
	<integer>5</integer>
	<key>Ancestors</key>
	<array>
		<string>com.apple.dt.unit.bundleBase</string>
		<string>com.apple.dt.unit.iPhoneBase</string>
	</array>
	<key>Targets</key>
	<array>
		<dict>
			<key>ProductType</key>
			<string>com.apple.product-type.bundle</string>
			<key>SharedSettings</key>
			<dict>
				<key>WRAPPER_EXTENSION</key>
				<string>framework</string>
				<key>FRAMEWORK_VERSION</key>
				<string>A</string>
				<key>DYLIB_COMPATIBILITY_VERSION</key>
				<string>1</string>
				<key>DYLIB_CURRENT_VERSION</key>
				<string>1</string>
				<key>SKIP_INSTALL</key>
				<string>YES</string>
				<key>DEPLOYMENT_POSTPROCESSING</key>
				<string>YES</string>
				<key>MACH_O_TYPE</key>
				<string>mh_object</string>
				<key>DEAD_CODE_STRIPPING</key>
				<string>NO</string>
				<key>LINK_WITH_STANDARD_LIBRARIES</key>
				<string>NO</string>
				<key>OTHER_LDFLAGS</key>
				<string>-ObjC</string>
				<key>INSTALL_PATH</key>
				<string>$(BUILT_PRODUCTS_DIR)</string>
			</dict>
			<key>BuildPhases</key>
			<array>
				<dict>
					<key>Class</key>
					<string>Sources</string>
				</dict>
				<dict>
					<key>Class</key>
					<string>Frameworks</string>
				</dict>
				<dict>
					<key>Class</key>
					<string>Headers</string>
				</dict>
				<dict>
					<key>Class</key>
					<string>Resources</string>
				</dict>
				<dict>
					<key>Class</key>
					<string>ShellScript</string>
					<key>ShellPath</key>
					<string>/bin/sh</string>
					<key>ShellScript</key>
					<string>rm -f &quot;${CONFIGURATION_BUILD_DIR}/FakeFramework&quot;
if [ -f &quot;${CONFIGURATION_BUILD_DIR}/${EXECUTABLE_PATH}&quot; ]; then
	cp &quot;${CONFIGURATION_BUILD_DIR}/${EXECUTABLE_PATH}&quot; &quot;${CONFIGURATION_BUILD_DIR}/FakeFramework&quot;
fi
</string>
                </dict>
			</array>
		</dict>
		<dict>
			<key>Name</key>
			<string>Universal_Framework</string>
			<key>TargetType</key>
			<string>Aggregate</string>
			<key>SharedSettings</key>
			<dict>
				<key>PRODUCT_NAME</key>
				<string>UniversalFramework</string>
			</dict>
			<key>BuildPhases</key>
			<array>
				<dict>
					<key>Class</key>
					<string>ShellScript</string>
					<key>ShellPath</key>
					<string>/bin/sh</string>
					<key>ShellScript</key>
					<string>set -e
set -u

# Assume the target name is the same as the project name
UFW_TARGET=${PROJECT}

if [ -z ${SDK_NAME} ]
then
    # Use the latest iphoneos SDK available
    UFW_GREP_RESULT=$(xcodebuild -showsdks | grep -o "iphoneos.*$")
    while read -r line
    do
        UFW_SDK_VERSION="${line}"
    done &lt;&lt;&lt; "${UFW_GREP_RESULT}"
else
    # Use the SDK specified by XCode
    UFW_SDK_VERSION="${SDK_NAME}"
fi

UFW_SDK_VERSION=$(echo "${UFW_SDK_VERSION}" | grep -o "[0-9].*$")
UFW_FMWK_DIRNAME="${UFW_TARGET}.framework"
UFW_EMBEDDED_DIRNAME="${UFW_TARGET}.embeddedframework"
UFW_EXE_PATH="${UFW_FMWK_DIRNAME}/${UFW_TARGET}"
UFW_IPHONE_DIR="${BUILD_DIR}/${CONFIGURATION}-iphoneos"
UFW_SIMULATOR_DIR="${BUILD_DIR}/${CONFIGURATION}-iphonesimulator"
UFW_UNIVERSAL_DIR="${BUILD_DIR}/${CONFIGURATION}-universal"


# Build Framework

rm -rf "${UFW_UNIVERSAL_DIR}"

xcodebuild -project "${PROJECT_FILE_PATH}" -target "${UFW_TARGET}" -configuration ${CONFIGURATION} -sdk iphoneos${UFW_SDK_VERSION} BUILD_DIR=${BUILD_DIR} CONFIGURATION_TEMP_DIR=${CONFIGURATION_TEMP_DIR} clean build
xcodebuild -project "${PROJECT_FILE_PATH}" -target "${UFW_TARGET}" -configuration ${CONFIGURATION} -sdk iphonesimulator${UFW_SDK_VERSION} BUILD_DIR=${BUILD_DIR} CONFIGURATION_TEMP_DIR=${CONFIGURATION_TEMP_DIR} clean build

if [ ! -f "${UFW_IPHONE_DIR}/${UFW_EXE_PATH}" ]
then
    echo "Framework target \"${UFW_TARGET}\" had no source files to build from. Make sure your source files have the correct target membership"
    exit 1
fi

mkdir -p "${UFW_UNIVERSAL_DIR}"
cp -a "${UFW_IPHONE_DIR}/${UFW_FMWK_DIRNAME}" "${UFW_UNIVERSAL_DIR}/${UFW_FMWK_DIRNAME}"
lipo -create -output "${UFW_UNIVERSAL_DIR}/${UFW_EXE_PATH}" "${UFW_IPHONE_DIR}/${UFW_EXE_PATH}" "${UFW_SIMULATOR_DIR}/${UFW_EXE_PATH}"


# Build standard framework structure

mkdir -p "${UFW_UNIVERSAL_DIR}/${UFW_FMWK_DIRNAME}/Versions/A/Resources"
cd "${UFW_UNIVERSAL_DIR}/${UFW_FMWK_DIRNAME}"
mv "${UFW_TARGET}" "Versions/A/"
mkdir -p Headers
mv "Headers" "Versions/A/"

UFW_RESOURCE_LIST=$(ls)
while read -r filename
do
    if [ "${filename}" != "Versions" ]
    then
        mv "${filename}" "Versions/A/Resources/"
    fi
done &lt;&lt;&lt; "${UFW_RESOURCE_LIST}"

cd Versions
ln -s A Current
cd ..
ln -s "Versions/Current/${UFW_TARGET}"
ln -s "Versions/Current/Headers"
ln -s "Versions/Current/Resources"


# Build Embedded Framework

mkdir -p "${UFW_UNIVERSAL_DIR}/${UFW_EMBEDDED_DIRNAME}/Resources"
cp -a "${UFW_UNIVERSAL_DIR}/${UFW_FMWK_DIRNAME}" "${UFW_UNIVERSAL_DIR}/${UFW_EMBEDDED_DIRNAME}/"

cd "${UFW_UNIVERSAL_DIR}/${UFW_FMWK_DIRNAME}/Resources"
UFW_RESOURCE_LIST=$(ls)
cd "${UFW_UNIVERSAL_DIR}/${UFW_EMBEDDED_DIRNAME}/Resources"
while read -r filename
do
    if [ "${filename}" != "Info.plist" ]; then
        ln -s "../${UFW_FMWK_DIRNAME}/Resources/${filename}"
    fi
done &lt;&lt;&lt; "${UFW_RESOURCE_LIST}"
</string>
                </dict>
			</array>
		</dict>
	</array>
	<key>Options</key>
	<array>
		<dict>
			<key>Identifier</key>
			<string>includeUnitTests</string>
			<key>Name</key>
			<string>Include Unit Tests</string>
			<key>Description</key>
			<string>Indicates whether a unit test bundle should be created.</string>
			<key>Type</key>
			<string>checkbox</string>
			<key>SortOrder</key>
			<integer>1</integer>
			<key>Default</key>
			<string>true</string>
			<key>Units</key>
			<dict>
				<key>true</key>
				<array>
					<dict>
						<key>Components</key>
						<array>
							<dict>
								<key>Identifier</key>
								<string>org.stenerud.iosFakeStaticFrameworkUnitTestBundle</string>
								<key>Name</key>
								<string>___PACKAGENAME___Tests</string>
							</dict>
						</array>
					</dict>
				</array>
			</dict>
		</dict>
	</array>
	<key>Nodes</key>
	<array>
		<string>___PACKAGENAME___-Prefix.pch:objC:importFoundation</string>
		<string>___PACKAGENAME___-Info.plist:fakeIosStaticFramework</string>
		<string>___PACKAGENAME___-Info.plist:NSHumanReadableCopyright</string>
	</array>
	<key>Definitions</key>
	<dict>
		<key>___PACKAGENAME___-Info.plist:fakeIosStaticFramework</key>
		<string>&lt;key&gt;CFBundleDevelopmentRegion&lt;/key&gt;
&lt;string&gt;English&lt;/string&gt;
&lt;key&gt;CFBundleExecutable&lt;/key&gt;
&lt;string&gt;${EXECUTABLE_NAME}&lt;/string&gt;
&lt;key&gt;CFBundleName&lt;/key&gt;
&lt;string&gt;${PRODUCT_NAME}&lt;/string&gt;
&lt;key&gt;CFBundleIconFile&lt;/key&gt;
&lt;string&gt;&lt;/string&gt;
&lt;key&gt;CFBundleInfoDictionaryVersion&lt;/key&gt;
&lt;string&gt;6.0&lt;/string&gt;
&lt;key&gt;CFBundlePackageType&lt;/key&gt;
&lt;string&gt;FMWK&lt;/string&gt;
&lt;key&gt;CFBundleSignature&lt;/key&gt;
&lt;string&gt;????&lt;/string&gt;
&lt;key&gt;CFBundleVersion&lt;/key&gt;
&lt;string&gt;1&lt;/string&gt;
&lt;key&gt;CFBundleShortVersionString&lt;/key&gt;
&lt;string&gt;1.0&lt;/string&gt;
&lt;key&gt;NSPrincipalClass&lt;/key&gt;
&lt;string&gt;&lt;/string&gt;
</string>
	</dict>
</dict>
</plist>
