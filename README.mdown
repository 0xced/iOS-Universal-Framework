iOS Universal Framework Builder
===============================

Script & instructions for building universal iOS frameworks.

By Karl Stenerud


Why a Framework?
----------------

Distributing libraries in a developer-friendly manner is tricky. You need to
include not only the library itself, but also any public include files,
resources, scripts etc.

Apple's solution to this problem is frameworks, which are basically folders
that follow a standard structure to include everything required to use a
library. Unfortunately, in disallowing dynamically linked libraries in iOS,
Apple also removed iOS framework creation functionality in XCode.

It is, however, possible to make a "statically linked" framework with the right
magical incantations. This document and the supporting script provide that
magic.


Step-by-Step Instructions
-------------------------

1. Start a new **Cocoa Touch Static Library** project.
    - In the menu, go to **File** -> **New Project**.
    - Under **iOS** -> **Library**, select **Cocoa Touch Static Library**
    - Choose a name for your project.

2. Delete the auto-generated library target.
    - Expand **Targets** (in the **Groups & Files** area)
    - CTRL-Click the library target and select **Delete**

3. Create a **loadable bundle**.
    - In the menu, go to **Project** -> **New Target**
    - Under **Max OS X** -> **Cocoa**, select **Loadable Bundle**
    - Choose a name for your framework.

4. Convert your **loadable bundle** target into a **framework** target.
    - Select your new loadable bundle target (in the **Groups & Files** area
      under **Targets**)
    - In the menu, go to **File** -> **Get Info**
    - Select the **Build** tab.
    - Set **Configuration** to **All Configurations**
    - Change **Wrapper Extension** from **bundle** to **framework**
    - Change **Mach-O Type** from **bundle** to **Relocatable Object File**
    - Uncheck **Dead Code Stripping**
    - Uncheck **Link With Standard Libraries**
    - Remove all references to **AppKit** and **Foundation**. They can be found
      under:
        - Other Linker Flags
        - GCC_PREFIX_HEADER
    - Select the **Properties** tab
    - Change **Type** from **BNDL** to **FMWK**

5. Add a **Copy Headers** phase to your framework target:
    - Select your framework target
    - In the menu, go to **Project** -> **New Build Phase** ->
      **New Copy Headers Build Phase**

6. Copy **UniversalFW.sh** to the root directory of your project (using Finder).

7. Add **Shell Script Target** to your project:
    - In the menu, go to **Project** -> **New Target**
    - Under **Max OS X** -> **Other**, select **Shell Script Target**
    - Give it a name like "Build Frameworks".
    - Expand the target, then double-click on the **Run Script** task.
	- Put the following into the script:

        sh UniversalFW.sh -a rebuild <your framework's name>

8. Build the shell script target to make the initial framework structure.

9. (Optional) Create groups for your debug and release mode frameworks.
    - Select your project (in the **Groups & Files** area)
    - In the menu, go to **Project** -> **New Group**
    - Call the group **Debug Framework**
    - Do the same to create **Release Framework**

10. (Optional) Add the framework structures to your project.
    - From **Finder**, open the **build** folder inside your project.
      You should see subfolders **Debug-iphoneos**, **Debug-iphonesimulator**,
      **Debug-universal**, **Release-iphoneos**, **Release-iphonesimulator**,
      **Release-universal**.
    - Open **Release-universal** and drag your framework folder into the
      **Release Framework** group
      in your project in XCode.
        - UNCHECK: **Copy items into destination group's folder**
        - SELECT: **Create Folder References for any added folders**
        - UNCHECK: everything in **Add To Targets**
        - Click **Add**
    - Do the same for the **Debug** framework.

11. Add your code to the project, using your framework as the target.

12. Designate your public header files.
    - Open the **Copy Headers** build phase (under **Targets** ->
      **[your framework]** -> **Copy Headers**)
    - CTRL-click on any headers to be made public and select **Set Role** ->
      **Public**
    - Note: If you remove stuff from "Copy Headers" or set role from public to
      private, you MUST rebuild your frameworks via the UniversalFW.sh script.
      
13. Rebuild your framework via the shell script target.


And you're done!
----------------

You can now drag and drop the release or debug version of your framework from
XCode (or via Finder) into another project. To use headers from your
framework, use the form:

    #import <MyAweseomeFramework/SomeHeader.h>

The included example project demonstrates various ways in which the
builder script can be used.


Caveats:
--------

I haven't figured out how to make error conditions appear in red in XCode's
build results page, so some failures (such as with lipo) will appear as
successful in the build results. Please be sure to check the last line of
the script's output for a message starting with "Error:"


Advanced UniversalFW.sh
-----------------------

In order to support more complex environments, UniversalFW.sh supports command
line switches:

    -p <platforms>: Platforms to build
    -c <configurations>: Configurations to build
    -a <action>: One of: build, clean, rebuild (or "clean build")

When called with no switches, it defaults to the following:

    -p "iphoneos iphonesimulator" -c "Debug Release" -a build

UniversalFW.sh can also be called from the command line. When called via the
command line, it will make some assumptions:

* The build directory is assumed to be "build" under the project root.
* It builds using the latest iphone SDK.
